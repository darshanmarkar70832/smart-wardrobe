<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Wardrobe</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #FAD0C9FF;
        }

        /* .inner{
            background-color: #101820ff;
        } */
        .navi {
            background-color: #101820FF;
        }

        .clothing-item {
            background-color: #101820ff;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            transition: transform 0.2s;
            border: 1px solid #4A5568;
            height: auto;
            /* Allow the height to adjust based on content */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .clothing-item img {
            max-width: 100%;
            height: 150px;
            /* Specify a fixed height or adjust as needed */
            object-fit: cover;
            /* Ensures the image covers the area without distortion */
            border-radius: 0.5rem;
        }

        .clothing-item:hover {
            transform: scale(1.05);
        }


        .wardrobe-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 1rem;
            padding: 1rem;
            /* Add padding to prevent image cutoff */
        }


        @media (min-width: 640px) {
            .wardrobe-container {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            }
        }

        @media (min-width: 1024px) {
            .wardrobe-container {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }

        .filter-section {
            margin-bottom: 1rem;
        }

        select,
        input {
            background-color: #2D3748;
            color: white;
            padding: 0.5rem;
            border-radius: 0.25rem;
            border: 1px solid #4A5568;
        }

        #mobile-menu {
            position: fixed;
            top: 0;
            right: -300px; /* Start off-screen */
            width: 300px;
            height: 100vh;
            background-color: #101820FF;
            z-index: 50;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        #mobile-menu a {
            color: white;
            text-decoration: none;
            font-size: 1.2rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: background-color 0.3s;
        }

        #mobile-menu a:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        #closeButton {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: background-color 0.3s;
        }

        #closeButton:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Responsive Grid Adjustments */
        @media (max-width: 640px) {
            .wardrobe-container {
                grid-template-columns: repeat(1, 1fr);
                padding: 0.5rem;
            }
            .filter-section form {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            .inner {
                padding: 1rem;
            }
        }

        @media (min-width: 641px) and (max-width: 1024px) {
            .wardrobe-container {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }
            .filter-section form {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (min-width: 1025px) {
            .wardrobe-container {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 1.5rem;
            }
            .filter-section form {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        /* Ensure Clear Filters button is responsive */
        .clear-filters {
            @apply bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded w-full sm:w-auto;
            /* Use full width on small screens and auto width on larger screens */
        }
    </style>
</head>

<body class=" min-h-screen flex flex-col">
    <nav class="navi text-white p-4 flex justify-between items-center">
        <div class=" flex items-center gsap1">
            <span class=" text-xl font-bold text-purple-400 mr-2">D Cube</span>
            <img src="/images/logo.jpg" alt="D Cube Logo" class="w-10 h-10">
        </div>

        <div class="hidden lg:flex items-center space-x-6 ml-auto">
            <a href="/intro" class=" gsap2 text-white-400 hover:text-red-500">Home</a>
            <a href="/intro" class=" gsap2 text-white-400 hover:text-red-500">About</a>
            <a href="/intro" class=" gsap2 text-white-400 hover:text-red-500">Contact us</a>
            <a href="/esp32/monitor" class="gsap2 text-white-400 hover:text-red-500">ESP32 Monitor</a>
            <a href="/users/logout" class=" gsap2 text-red-400 hover:text-red-500">Logout</a>
        </div>

        <div class="md:hidden">
            <button id="menuButton" class="focus:outline-none">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7">
                    </path>
                </svg>
            </button>
        </div>
    </nav>
    <span class="mt-4 ml-2 relative">
        <a class="bg-blue-500 px-4 py-2 rounded-lg text-white" href="/intro">Back</a>
    </span>
    <div id="mobile-menu">
        <button class="close-btn" id="closeButton">&times;</button>
        <a href="/intro">Home</a>
        <a href="/intro">About</a>
        <a href="/intro">Contact us</a>
        <a href="/esp32/monitor">ESP32 Monitor</a>
        <a href="/users/logout" class="text-red-400">Logout</a>
    </div>


    <div class="inner text-white p-8 rounded-lg shadow-lg max-w-6xl w-full mx-auto mt-4">
        <h2 class="text-2xl text-black font-bold mb-6 text-center">Your Wardrobe</h2>
        <div class="filter-section mb-6 text-black">
            <h3 class="text-lg font-bold mb-4">Check Weather and Clothing Suggestions</h3>
            <!-- Weather Form -->
            <form id="weatherForm" class="flex flex-col md:flex-row justify-center space-y-4 md:space-y-0 md:space-x-4">
                <input type="text" id="location" placeholder="Enter Location"
                    class="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">
                    Get Weather
                </button>
            </form>


            <!-- Weather Results -->
            <div id="weatherResult" class="mt-4 text-black bg-gray-100 p-4 rounded shadow-lg">
                <p>Enter a location to see weather information.</p>
            </div>
        </div>
        <div class="p-4 text-black">
            <form id="gemini-form" class="space-y-4">
                <div class="mb-4">
                    <label for="prompt" class="block text-sm font-medium text-gray-700 mb-2">Ask for Outfit Advice to Gemini</label>
                    <textarea id="prompt" placeholder="Example: What to wear for gym?"
                        class="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
                </div>
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-200">
                    Get Outfit Suggestion
                </button>
            </form>
            <div id="recommendation-section" class="mt-4 hidden">
                <p id="description-text" class="text-gray-700 mb-4 p-2 bg-gray-100 rounded"></p>
                <div id="recommended-items" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Recommended items will be displayed here -->
                </div>
                <div class="flex space-x-4 mt-4">
                    <button id="try-different" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">
                        Try Different Suggestion
                    </button>
                    <button id="show-all" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition">
                        Show All Clothes
                    </button>
                </div>
            </div>
        </div>

        <% if (clothes.length===0) { %>
            <p class="text-center text-black">Your wardrobe is empty. Add some clothes!</p>
            <% } else { %>
                <div class="filter-section mb-6 text-black">
                    <form action="/clothes/get-outfits" method="GET"
                        class="flex flex-col md:flex-row justify-center space-y-4 md:space-y-0 md:space-x-4">
                        <div>
                            <label for="gender" class="block text-black">Gender:</label>
                            <select id="gender" name="gender" class="w-full">
                                <option value="" <%=gender==='' ? 'selected' : '' %>>All</option>
                                <option value="Male" <%=gender==='Male' ? 'selected' : '' %>>Male</option>
                                <option value="Female" <%=gender==='Female' ? 'selected' : '' %>>Female</option>

                            </select>
                        </div>
                        <div>
                            <label for="size" class="block text-black">Size:</label>
                            <select id="size" name="size" class="w-full">
                                <option value="" <%=size==='' ? 'selected' : '' %>>All</option>
                                <option value="Small" <%=size==='Small' ? 'selected' : '' %>>Small</option>
                                <option value="Medium" <%=size==='Medium' ? 'selected' : '' %>>Medium</option>
                                <option value="Large" <%=size==='Large' ? 'selected' : '' %>>Large</option>
                                <option value="Extra Large" <%=size==='Extra Large' ? 'selected' : '' %>>Extra Large
                                </option>
                            </select>
                        </div>
                        <div>
                            <label for="occasion" class="block text-black">Occasion:</label>
                            <select id="occasion" name="occasion" class="w-full">
                                <option value="" <%=occasion==='' ? 'selected' : '' %>>All</option>
                                <option value="Casual" <%=occasion==='Casual' ? 'selected' : '' %>>Casual</option>
                                <option value="Formal" <%=occasion==='Formal' ? 'selected' : '' %>>Formal</option>
                                <option value="Party" <%=occasion==='Party' ? 'selected' : '' %>>Party</option>
                                <option value="Sports" <%=occasion==='Sports' ? 'selected' : '' %>>Sports</option>
                            </select>
                        </div>
                        <div>
                            <label for="weather" class="block text-black">Weather:</label>
                            <select id="weather" name="weather" class="w-full">
                                <option value="" <%=weather==='' ? 'selected' : '' %>>All</option>
                                <option value="Sunny" <%=weather==='Sunny' ? 'selected' : '' %>>Sunny</option>
                                <option value="Rainy" <%=weather==='Rainy' ? 'selected' : '' %>>Rainy</option>
                                <option value="Cold" <%=weather==='Cold' ? 'selected' : '' %>>Cold</option>

                            </select>
                        </div>
                        <div>
                            <label for="subcategory" class="block text-black">Subcategory:</label>
                            <select id="subcategory" name="subcategory" class="w-full">
                                <option value="" <%=subcategory==='' ? 'selected' : '' %>>All</option>
                                <option value="Shirt" <%=subcategory==='Shirt' ? 'selected' : '' %>>Shirt</option>
                                <option value="Pant" <%=subcategory==='Pant' ? 'selected' : '' %>>Pant</option>
                                <option value="Jacket" <%=subcategory==='Jacket' ? 'selected' : '' %>>Jacket</option>
                                <option value="Dress" <%=subcategory==='Dress' ? 'selected' : '' %>>Dress</option>
                                <option value="Top" <%=subcategory==='Top' ? 'selected' : '' %>>Top</option>
                                <option value="Skirt" <%=subcategory==='Skirt' ? 'selected' : '' %>>Skirt</option>
                                <option value="T-Shirt" <%=subcategory==='T-Shirt' ? 'selected' : '' %>>T-Shirt</option>
                                <option value="Short" <%=subcategory==='Short' ? 'selected' : '' %>>Short</option>
                                <option value="Jeans" <%=subcategory==='Jeans' ? 'selected' : '' %>>Jeans</option>
                                <option value="Other" <%=subcategory==='Other' ? 'selected' : '' %>>Other</option>

                            </select>
                        </div>
                        <div>
                            <label for="color" class="block text-black">Color:</label>
                            <select id="color" name="color" class="w-full">
                                <option value="" <%=color==='' ? 'selected' : '' %>>All</option>
                                <option value="Red" <%=color==='Red' ? 'selected' : '' %>>Red</option>
                                <option value="Blue" <%=color==='Blue' ? 'selected' : '' %>>Blue</option>
                                <option value="Green" <%=color==='Green' ? 'selected' : '' %>>Green</option>
                                <option value="Black" <%=color==='Black' ? 'selected' : '' %>>Black</option>
                                <option value="White" <%=color==='White' ? 'selected' : '' %>>White</option>
                            </select>
                        </div>
                        <div>
                            <label for="fabric" class="block text-black">Fabric Type:</label>
                            <select id="fabric" name="fabric" class="w-full">
                                <option value="" <%=fabric==='' ? 'selected' : '' %>>All</option>
                                <option value="Cotton" <%=fabric==='Cotton' ? 'selected' : '' %>>Cotton</option>
                                <option value="Wool" <%=fabric==='Wool' ? 'selected' : '' %>>Wool</option>
                                <option value="Polyester" <%=fabric==='Polyester' ? 'selected' : '' %>>Polyester
                                </option>
                                <option value="Silk" <%=fabric==='Silk' ? 'selected' : '' %>>Silk</option>
                            </select>
                        </div>
                        <div class="flex items-center justify-center">
                            <button type="submit"
                                class="bg-blue-500 hover:bg-blue-600 text-white mt-6 font-bold py-2 px-4 rounded w-full">Filter</button>
                        </div>
                    </form>
                    <button id="clearFilters" class="clear-filters mt-4">Clear Filters</button>
                </div>

                <div id="wardrobe-container" class="wardrobe-container">
                    <% clothes.forEach(cloth => { %>
                        <div class="clothing-item" data-id="<%= cloth._id %>" 
                             data-subcategory="<%= cloth.subcategory %>"
                             data-color="<%= cloth.color %>"
                             data-fabric="<%= cloth.fabric %>"
                             data-occasion="<%= cloth.occasion %>"
                             data-weather="<%= cloth.weather %>">
                            <img src="<%= cloth.image %>" alt="<%= cloth.subcategory %>" />
                            <h3 class="text-lg font-semibold mt-2"><%= cloth.subcategory %></h3>
                            <p class="text-sm">Gender: <%= cloth.gender %></p>
                            <p class="text-sm">Size: <%= cloth.size %></p>
                            <p class="text-sm">Color: <%= cloth.color %></p>
                            <p class="text-sm">Fabric: <%= cloth.fabric %></p>
                            <p class="text-sm">Occasion: <%= cloth.occasion %></p>
                            <p class="text-sm">Weather: <%= cloth.weather %></p>
                            <p class="text-sm">Weight: <%= cloth.weight %> grams</p>
                        </div>
                    <% }); %>
                </div>
                <% } %>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

    <script>
        const form = document.getElementById('gemini-form');
        const recommendationSection = document.getElementById('recommendation-section');
        const descriptionText = document.getElementById('description-text');
        const recommendedItems = document.getElementById('recommended-items');
        const tryDifferentBtn = document.getElementById('try-different');
        const showAllBtn = document.getElementById('show-all');
        const wardrobeContainer = document.getElementById('wardrobe-container');
        let allClothingItems = [];

        // Store all clothing items on page load
        document.querySelectorAll('.clothing-item').forEach(item => {
            allClothingItems.push(item.outerHTML);
        });

        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            const prompt = document.getElementById('prompt').value;
            
            descriptionText.textContent = 'Getting suggestion...';
            recommendationSection.classList.remove('hidden');

            try {
                const response = await fetch('/api/gemini/generate-description', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        prompt: `Based on the following request, recommend specific items from my wardrobe using exact format "**Color Fabric Type**" (e.g., **Black Wool T-shirt**): ${prompt}`
                    })
                });

                const data = await response.json();
                
                if (response.ok) {
                    descriptionText.textContent = data.description;
                    const recommendations = parseRecommendations(data.description);
                    displayRecommendedItems(recommendations);
                } else {
                    descriptionText.textContent = 'Error: ' + (data.message || 'Failed to get recommendations');
                }
            } catch (error) {
                console.error('Error:', error);
                descriptionText.textContent = 'Error: Failed to get recommendations';
            }
        });

        function parseRecommendations(description) {
            const items = [];
            const clothingItems = document.querySelectorAll('.clothing-item');
            
            // Extract items between ** markers
            const matches = description.match(/\*\*(.*?)\*\*/g) || [];
            if (!matches.length) {
                console.log('No recommendations found in format **Color Fabric Type**');
                return items;
            }

            const recommendedItems = matches.map(match => {
                const item = match.replace(/\*\*/g, '').toLowerCase();
                const parts = item.split(' ');
                if (parts.length < 3) {
                    console.log('Invalid recommendation format:', item);
                    return null;
                }
                return {
                    color: parts[0],
                    fabric: parts[1],
                    type: parts.slice(2).join(' ').replace('t-shirt', 't shirt').replace('-', ' ') // Normalize type
                };
            }).filter(item => item !== null);
            
            clothingItems.forEach(item => {
                // Normalize the data attributes
                const subcategory = item.dataset.subcategory.toLowerCase().replace('-', ' ');
                const color = item.dataset.color.toLowerCase();
                const fabric = item.dataset.fabric.toLowerCase();
                
                console.log('Checking item:', { subcategory, color, fabric }); // Debug log
                
                // Check each recommended item for a match
                for (const rec of recommendedItems) {
                    console.log('Against recommendation:', rec); // Debug log
                    
                    // Normalize the type for comparison
                    const normalizedType = rec.type.replace('t-shirt', 't shirt').replace('-', ' ');
                    
                    if (color === rec.color && 
                        fabric === rec.fabric && 
                        subcategory.replace('-', ' ') === normalizedType) {
                        console.log('Found match!'); // Debug log
                        items.push(item);
                        break;
                    }
                }
            });
            
            console.log('Found items:', items.length); // Debug log
            return items;
        }

        function displayRecommendedItems(items) {
            recommendedItems.innerHTML = '';
            wardrobeContainer.style.display = 'none';
            document.querySelector('.filter-section').style.display = 'none';
            document.querySelector('#weatherForm').parentElement.style.display = 'none';
            
            if (items.length > 0) {
                items.forEach(item => {
                    const itemDiv = item.cloneNode(true);
                    itemDiv.classList.add('bg-gray-800', 'p-4', 'rounded-lg');
                    
                    // Make text white and visible
                    const textElements = itemDiv.querySelectorAll('p, h3');
                    textElements.forEach(el => {
                        el.classList.add('text-white', 'mb-1');
                    });
                    
                    // Make image larger and centered
                    const img = itemDiv.querySelector('img');
                    if (img) {
                        img.classList.remove('h-48');
                        img.classList.add('w-full', 'h-64', 'object-contain', 'mb-3', 'rounded');
                    }
                    
                    recommendedItems.appendChild(itemDiv);
                });
            } else {
                recommendedItems.innerHTML = '<p class="text-red-500 text-center">No matching items found in your wardrobe.</p>';
            }
        }

        // Show all clothes button
        showAllBtn.addEventListener('click', () => {
            recommendationSection.classList.add('hidden');
            wardrobeContainer.style.display = 'grid';
            document.querySelector('.filter-section').style.display = 'block';
            document.querySelector('#weatherForm').parentElement.style.display = 'block';
            wardrobeContainer.innerHTML = allClothingItems.join('');
        });

        // Try different outfits button
        tryDifferentBtn.addEventListener('click', () => {
            document.getElementById('prompt').value = '';
            document.getElementById('prompt').focus();
            recommendedItems.innerHTML = '';
            descriptionText.textContent = '';
        });

        document.getElementById('weatherForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent the default form submission behavior

            const location = document.getElementById('location').value.trim();

            // Validate the location input
            if (!location) {
                document.getElementById('weatherResult').innerHTML = `<p class="text-red-500">Please enter a valid location.</p>`;
                return;
            }

            try {
                // Show loading message
                document.getElementById('weatherResult').innerHTML = `<p>Loading weather data...</p>`;

                const response = await fetch('/api/weather', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ location }),
                });

                const data = await response.json();

                if (!response.ok) {
                    document.getElementById('weatherResult').innerHTML = `<p class="text-red-500">${data.error}</p>`;
                    return;
                }

                const weatherHtml = `
            <h4 class="font-bold text-xl">Weather in ${data.location}</h4>
            <p><strong>Temperature:</strong> ${data.temperature}°C</p>
            <p><strong>Condition:</strong> ${data.weatherDescription}</p>
            <p><strong>Suggestion:</strong> ${data.clothingSuggestion}</p>
        `;
                document.getElementById('weatherResult').innerHTML = weatherHtml;
            } catch (error) {
                document.getElementById('weatherResult').innerHTML = `<p class="text-red-500">Error fetching weather data.</p>`;
            }
        });

        // GSAP Animations
        function initAnimations() {
            // Navbar animations
            gsap.from(".gsap1", {
                opacity: 0,
                y: -40,
                duration: 1,
                ease: "power2.out"
            });

            gsap.from(".gsap2", {
                opacity: 0,
                y: -40,
                duration: 1,
                stagger: 0.2,
                ease: "power2.out"
            });

            // Content animations
            gsap.from(".inner", {
                opacity: 0,
                y: 20,
                duration: 1,
                delay: 0.5,
                ease: "power2.out"
            });

            gsap.from(".clothing-item", {
                opacity: 0,
                y: 30,
                duration: 0.8,
                stagger: 0.1,
                ease: "power2.out"
            });

            // Form animations
            gsap.from(".filter-section", {
                opacity: 0,
                y: 20,
                duration: 0.8,
                delay: 0.3,
                ease: "power2.out"
            });
        }

        // Mobile Menu Animation
        const mobileMenu = document.getElementById('mobile-menu');
        let menuTimeline = gsap.timeline({ paused: true });

        menuTimeline
            .to(mobileMenu, {
                right: 0,
                duration: 0.5,
                ease: "power2.inOut"
            })
            .from("#mobile-menu a", {
                opacity: 0,
                x: 50,
                stagger: 0.1,
                duration: 0.3,
                ease: "power2.out"
            }, "-=0.2");

        document.getElementById('menuButton').onclick = function() {
            menuTimeline.play();
        };

        document.getElementById('closeButton').onclick = function() {
            menuTimeline.reverse();
        };

        // Initialize animations on page load
        document.addEventListener('DOMContentLoaded', initAnimations);

        document.getElementById('clearFilters').onclick = function () {
            document.getElementById('occasion').selectedIndex = 0;
            document.getElementById('weather').selectedIndex = 0;
            document.getElementById('subcategory').selectedIndex = 0;
            document.getElementById('color').selectedIndex = 0;
            document.getElementById('fabric').selectedIndex = 0;
            // Submit the filter form to refresh the clothing items
            document.querySelector('form').submit();
        };

        async function findAlternatives(itemType) {
            const alternativesSection = document.getElementById('alternativesSection');
            const alternativesList = document.getElementById('alternativesList');
            
            // Show loading state
            alternativesSection.classList.remove('hidden');
            alternativesList.innerHTML = '<div class="text-white">Loading alternatives...</div>';
            
            try {
                // Fetch alternatives from your wardrobe based on item type
                const response = await fetch(`/clothes/alternatives?type=${itemType}&occasion=<%= occasion %>&weather=<%= weather %>`);
                const data = await response.json();
                
                if (data.alternatives && data.alternatives.length > 0) {
                    alternativesList.innerHTML = data.alternatives.map(item => `
                        <div class="bg-gray-700 p-4 rounded">
                            <img src="${item.image}" alt="${item.subcategory}" class="w-full h-32 object-cover rounded mb-2">
                            <div class="text-white">
                                <p class="font-semibold">${item.subcategory}</p>
                                <p class="text-sm text-gray-300">Color: ${item.color}</p>
                                <p class="text-sm text-gray-300">Fabric: ${item.fabric}</p>
                            </div>
                        </div>
                    `).join('');
                } else {
                    alternativesList.innerHTML = '<div class="text-white">No alternative options found.</div>';
                }
            } catch (error) {
                alternativesList.innerHTML = '<div class="text-red-500">Error loading alternatives.</div>';
            }
        }
    </script>
</body>

</html>