<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Clothes</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        /* Base styles */
        body {
            background: linear-gradient(135deg, #FAD0C9FF 0%, #F8B3A5 100%);
            min-height: 100vh;
        }

        .container-box {
            background: rgba(16, 24, 32, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 95%;
            margin: 1rem auto;
            padding: 1.5rem;
        }

        /* Form elements */
        input,
        select,
        textarea {
            background: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            color: #1F2937;
            font-weight: 500;
            padding: 0.75rem 1rem;
            width: 100%;
            font-size: 1rem;
        }

        input::placeholder {
            color: #6B7280;
        }

        select {
            background-color: white;
            cursor: pointer;
        }

        input:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: #F56565;
            box-shadow: 0 0 0 2px rgba(245, 101, 101, 0.2);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            color: white;
            font-weight: 500;
            margin-bottom: 0.75rem;
            display: block;
            font-size: 1rem;
        }

        h2.page-title {
            color: white;
            font-size: 1.875rem;
            font-weight: 600;
            margin-bottom: 2rem;
            text-align: center;
        }

        /* Mobile Menu */
        #mobile-menu {
            position: fixed;
            top: 0;
            right: 0;
            width: 100%;
            height: 100vh;
            background: rgba(16, 24, 32, 0.98);
            backdrop-filter: blur(10px);
            z-index: 50;
            padding: 2rem;
            display: none;
            transform: translateX(100%);
        }

        .mobile-menu-content {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            margin-top: 4rem;
        }

        #mobile-menu.active {
            display: flex;
            transform: translateX(0);
        }

        @media (min-width: 768px) {
            #mobile-menu {
                display: none;
            }
        }

        #mobile-menu a {
            color: white;
            text-decoration: none;
            padding: 1rem;
            border-radius: 8px;
            font-size: 1.25rem;
            font-weight: 500;
            text-align: center;
        }

        #mobile-menu a:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: white;
            font-size: 2rem;
            cursor: pointer;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 60;
        }

        /* Hamburger Button */
        .hamburger-btn {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            width: 28px;
            height: 20px;
            background: transparent;
            border: none;
            cursor: pointer;
            padding: 0;
            z-index: 60;
        }

        .hamburger-btn span {
            width: 100%;
            height: 2px;
            background: white;
            border-radius: 2px;
            transform-origin: center;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container-box {
                width: 95%;
                margin: 1rem auto;
                padding: 1.25rem;
            }

            #mobile-menu {
                padding-top: 4rem;
            }

            .mobile-menu-content {
                width: 100%;
            }

            .mobile-menu-content a {
                width: 100%;
                text-align: center;
                font-size: 1.25rem;
                padding: 1rem;
            }
        }

        /* Submit button styling */
        .submit-btn {
            background: #F56565;
            color: white;
            width: 100%;
            padding: 0.875rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.1rem;
            border: none;
            cursor: pointer;
            margin-top: 2rem;
        }

        .submit-btn:hover {
            background: #E53E3E;
        }

        /* Custom file input styling */
        input[type="file"] {
            background: white;
            color: #1F2937;
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            border: 2px solid #F56565;
        }

        input[type="file"]::-webkit-file-upload-button {
            background: #F56565;
            border: none;
            border-radius: 6px;
            color: white;
            padding: 0.5rem 1rem;
            margin-right: 1rem;
            cursor: pointer;
            font-weight: 500;
        }

        input[type="file"]::-webkit-file-upload-button:hover {
            background: #E53E3E;
        }

        /* Enhanced select styling */
        select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23F56565'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 1rem;
            padding-right: 2.5rem;
        }

        /* Preview image styling */
        #preview {
            max-height: 300px;
            object-fit: contain;
            border-radius: 8px;
            margin-top: 1rem;
            border: 2px solid rgba(255, 255, 255, 0.1);
        }

        /* Navbar enhancements */
        .nav-link {
            position: relative;
            transition: all 0.3s ease;
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: #F56565;
            transition: width 0.3s ease;
        }

        .nav-link:hover::after {
            width: 100%;
        }
    </style>
</head>

<body class=" min-h-screen flex flex-col">
    <nav class="bg-gray-800 text-white p-4 flex justify-between items-center">
        <!-- Logo Section -->
        <div class="flex items-center">
            <span class="text-xl font-bold text-purple-400 mr-2">D Cube</span>
            <img src="/images/logo.jpg" alt="D Cube Logo" class="w-10 h-10">
        </div>

        <!-- Navigation Links Section for large screens -->
        <div class="hidden md:flex items-center space-x-6">
            <a href="/intro" class="text-white hover:text-red-500">Home</a>
            <a href="/about" class="text-white hover:text-red-500">About</a>
            <a href="/contact" class="text-white hover:text-red-500">Contact us</a>
            <a href="/users/logout" class="text-red-400 hover:text-red-500">Logout</a>
        </div>

        <!-- Hamburger menu button for small screens -->
        <div class="block md:hidden">
            <button id="menuButton" class="hamburger-btn focus:outline-none">
                <span></span>
                <span></span>
                <span></span>
            </button>
        </div>
    </nav>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden">
        <button class="close-btn" id="closeButton">Ã—</button>
        <div class="mobile-menu-content">
            <a href="/intro" class="nav-link">Home</a>
            <a href="/about" class="nav-link">About</a>
            <a href="/contact" class="nav-link">Contact us</a>
            <a href="/users/logout" class="nav-link text-red-500">Logout</a>
        </div>
    </div>

    <div class="container-box">
        <h2 class="text-2xl font-bold mb-6 text-center text-white">Add Clothes to Your Wardrobe</h2>

        <!-- Display flash messages -->
        <% if (error.length > 0) { %>
            <div class="px-2 absolute top-[4.5rem] left-1/2 -translate-x-1/2 rounded-md bg-blue-800 text-white notification">
                <span class="inline-block mt-2 mb-1">
                    <%= error %>
                </span>
            </div>
        <% } %>
        <% if (success.length > 0) { %>
            <div class="px-2 absolute top-[4.5rem] left-1/2 -translate-x-1/2 rounded-md bg-blue-800 text-white notification">
                <span class="inline-block mt-2 mb-1">
                    <%= success %>
                </span>
            </div>
        <% } %>

        <form id="addClothesForm" action="/clothes/add-clothes" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label class="form-label" for="gender">Gender</label>
                <select id="gender" name="gender" class="w-full p-2 rounded" required>
                    <option value="">Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Unisex">Unisex</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_gender" name="custom_gender" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom gender" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="subcategory">Subcategory</label>
                <select id="subcategory" name="subcategory" class="w-full p-2 rounded" required>
                    <option value="">Select Subcategory</option>
                    <option value="Shirt">Shirt</option>
                    <option value="T-Shirt">T-Shirt</option>
                    <option value="Jeans">Jeans</option>
                    <option value="Jacket">Jacket</option>
                    <option value="Short">Short</option>
                    <option value="Dress">Dress</option>
                    <option value="Skirt">Skirt</option>
                    <option value="Top">Top</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_subcategory" name="custom_subcategory" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom subcategory" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="size">Size</label>
                <select id="size" name="size" class="w-full p-2 rounded" required>
                    <option value="">Select Size</option>
                    <option value="XS">XS</option>
                    <option value="Small">Small</option>
                    <option value="Medium">Medium</option>
                    <option value="Large">Large</option>
                    <option value="XL">Extra Large</option>
                    <option value="XXL">XXL</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_size" name="custom_size" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom size" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="color">Color</label>
                <select id="color" name="color" class="w-full p-2 rounded" required>
                    <option value="">Select Color</option>
                    <option value="Red">Red</option>
                    <option value="Blue">Blue</option>
                    <option value="Green">Green</option>
                    <option value="Black">Black</option>
                    <option value="White">White</option>
                    <option value="Yellow">Yellow</option>
                    <option value="Purple">Purple</option>
                    <option value="Pink">Pink</option>
                    <option value="Brown">Brown</option>
                    <option value="Gray">Gray</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_color" name="custom_color" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom color" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="fabric">Fabric Type</label>
                <select id="fabric" name="fabric" class="w-full p-2 rounded" required>
                    <option value="">Select Fabric Type</option>
                    <option value="Cotton">Cotton</option>
                    <option value="Wool">Wool</option>
                    <option value="Polyester">Polyester</option>
                    <option value="Silk">Silk</option>
                    <option value="Denim">Denim</option>
                    <option value="Linen">Linen</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_fabric" name="custom_fabric" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom fabric" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="occasion">Occasion</label>
                <select id="occasion" name="occasion" class="w-full p-2 rounded" required>
                    <option value="">Select Occasion</option>
                    <option value="Casual">Casual</option>
                    <option value="Formal">Formal</option>
                    <option value="Sports">Sports</option>
                    <option value="Party">Party</option>
                    <option value="Business">Business</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_occasion" name="custom_occasion" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom occasion" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="weather">Weather</label>
                <select id="weather" name="weather" class="w-full p-2 rounded" required>
                    <option value="">Select Weather</option>
                    <option value="Sunny">Sunny</option>
                    <option value="Rainy">Rainy</option>
                    <option value="Cold">Cold</option>
                    <option value="Hot">Hot</option>
                    <option value="All Weather">All Weather</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="custom_weather" name="custom_weather" class="custom-input w-full p-2 rounded mt-2" placeholder="Enter custom weather" style="display: none;">
            </div>

            <div class="form-group">
                <label class="form-label" for="image">Image Upload</label>
                <input type="file" id="image" name="image" accept="image/*" class="w-full p-2 rounded" required />
                <img id="preview" class="w-full mt-4 rounded" />
            </div>

            <div class="form-group">
                <label class="form-label">Weight (grams)</label>
                <div class="weight-display bg-gray-700 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold text-white" id="weightValue">0</div>
                    <div class="text-sm text-gray-400 mt-1">Current Item Weight</div>
                    <div class="text-sm text-gray-400 mt-2">Total Weight: <span id="totalWeight">0</span>g</div>
                    <div class="mt-3 flex items-center justify-center space-x-2">
                        <input type="text" id="weightInput" class="px-3 py-2 rounded bg-gray-600 text-white w-32" placeholder="Enter weight" />
                        <button type="button" onclick="requestWeight()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Request Weight</button>
                        <button type="button" onclick="resetWeight()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Reset Weight</button>
                    </div>
                    <div class="mt-4">
                        <h4 class="text-white font-semibold mb-2">Weight History</h4>
                        <div id="weightHistory" class="text-sm text-gray-300">
                            <!-- Weight history will be displayed here -->
                        </div>
                    </div>
                </div>
                <input type="hidden" id="weight" name="weight" value="0" />
            </div>

            <button type="submit" class="submit-btn">Add to Wardrobe</button>
        </form>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script>
        // GSAP Animations
        const mobileMenu = document.getElementById('mobile-menu');
        const menuButton = document.getElementById('menuButton');
        const closeButton = document.getElementById('closeButton');
        const hamburgerLines = menuButton.querySelectorAll('span');
        const menuLinks = document.querySelectorAll('.mobile-menu-content a');

        // Menu open handler
        menuButton.addEventListener('click', () => {
            mobileMenu.style.display = 'flex';
            requestAnimationFrame(() => {
                gsap.to(mobileMenu, {
                    x: '0%',
                    duration: 0.5,
                    ease: 'power3.inOut'
                });

                // Animate hamburger to X
                gsap.to(hamburgerLines[0], {
                    rotate: 45,
                    y: 9,
                    duration: 0.3
                });
                gsap.to(hamburgerLines[1], {
                    opacity: 0,
                    duration: 0.3
                });
                gsap.to(hamburgerLines[2], {
                    rotate: -45,
                    y: -9,
                    duration: 0.3
                });

                // Animate menu links
                gsap.from(menuLinks, {
                    x: 50,
                    opacity: 0,
                    duration: 0.3,
                    stagger: 0.1,
                    ease: 'power2.out'
                });
            });
        });

        // Menu close handler
        closeButton.addEventListener('click', () => {
            // Animate menu out
            gsap.to(mobileMenu, {
                x: '100%',
                duration: 0.5,
                ease: 'power3.inOut',
                onComplete: () => {
                    mobileMenu.style.display = 'none';
                }
            });

            // Animate X back to hamburger
            gsap.to(hamburgerLines[0], {
                rotate: 0,
                y: 0,
                duration: 0.3
            });
            gsap.to(hamburgerLines[1], {
                opacity: 1,
                duration: 0.3
            });
            gsap.to(hamburgerLines[2], {
                rotate: 0,
                y: 0,
                duration: 0.3
            });
        });

        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            if (mobileMenu.style.display === 'flex' && 
                !mobileMenu.contains(e.target) && 
                !menuButton.contains(e.target)) {
                closeButton.click();
            }
        });

        // Close menu when pressing escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && mobileMenu.style.display === 'flex') {
                closeButton.click();
            }
        });

        // Page load animations
        document.addEventListener('DOMContentLoaded', () => {
            // Animate in the container
            gsap.from(".container-box", {
                opacity: 0,
                y: 30,
                duration: 0.8,
                ease: "power3.out"
            });

            // Stagger in the form groups
            gsap.from(".form-group", {
                opacity: 0,
                y: 20,
                duration: 0.5,
                stagger: 0.1,
                ease: "power2.out"
            });

            // Animate in the submit button
            gsap.from(".submit-btn", {
                opacity: 0,
                y: 20,
                duration: 0.5,
                delay: 0.3,
                ease: "back.out(1.7)"
            });

            // Animate in the navigation links
            gsap.from(".nav-link", {
                opacity: 0,
                y: -20,
                duration: 0.5,
                stagger: 0.1,
                ease: "power2.out"
            });
        });

        const subcategoryOptions = {
            Male: ['T-Shirt', 'Shirt', 'Jeans', 'Jacket', 'Short', 'Suit'],
            Female: ['Dress', 'Skirt', 'Top', 'Jeans', 'Suit'],
            Unisex: ['T-Shirt', 'Shirt', 'Jeans', 'Jacket', 'Suit']
        };

        document.getElementById('gender').addEventListener('change', function () {
            const gender = this.value;
            const subcategorySelect = document.getElementById('subcategory');
            
            // Start with the default "Select Subcategory" option
            subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';

            // Add gender-specific options if a gender is selected
            if (gender && subcategoryOptions[gender]) {
                subcategoryOptions[gender].forEach(function (subcategory) {
                    const option = document.createElement('option');
                    option.value = subcategory;
                    option.textContent = subcategory;
                    subcategorySelect.appendChild(option);
                });
            }

            // Always add the "Other" option at the end
            const otherOption = document.createElement('option');
            otherOption.value = 'Other';
            otherOption.textContent = 'Other';
            subcategorySelect.appendChild(otherOption);

            // Reset the custom input field
            const customInput = document.getElementById('custom_subcategory');
            customInput.style.display = 'none';
            customInput.required = false;
            subcategorySelect.required = true;
        });

        document.getElementById('image').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const preview = document.getElementById('preview');
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }
                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        });

        // Handle custom input fields
        document.querySelectorAll('select').forEach(select => {
            const customInput = document.getElementById('custom_' + select.id);
            if (customInput) {
                select.addEventListener('change', function() {
                    if (this.value === 'Other') {
                        customInput.style.display = 'block';
                        customInput.required = true;
                        this.required = false;
                    } else {
                        customInput.style.display = 'none';
                        customInput.required = false;
                        this.required = true;
                    }
                });
            }
        });

        // Start weight updates when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Get initial weight state
                const response = await fetch('/esp32/weight-state');
                const data = await response.json();
                
                if (data.success) {
                    // Update displays with stored values, using null checks
                    document.getElementById('weightValue').textContent = '0.0';
                    document.getElementById('totalWeight').textContent = 
                        (data.totalWeight || 0).toFixed(1);
                    document.getElementById('weightInput').value = '';
                    
                    // Update weight history display
                    const historyDiv = document.getElementById('weightHistory');
                    historyDiv.innerHTML = '';
                    
                    // Only try to display history if it exists
                    if (Array.isArray(data.weightHistory) && data.weightHistory.length > 0) {
                        data.weightHistory.forEach((weight, index) => {
                            if (typeof weight === 'number') {
                                const item = document.createElement('div');
                                item.className = 'flex justify-between items-center py-1 px-2 bg-gray-600 rounded mb-1';
                                item.innerHTML = `
                                    <span>Item ${index + 1}:</span>
                                    <span>${weight.toFixed(1)}g</span>
                                `;
                                historyDiv.appendChild(item);
                            }
                        });
                    }
                } else {
                    console.warn('Failed to load weight state:', data.message);
                    // Set default values if loading fails
                    document.getElementById('weightValue').textContent = '0.0';
                    document.getElementById('totalWeight').textContent = '0.0';
                    document.getElementById('weightInput').value = '';
                }
            } catch (error) {
                console.error('Error loading weight state:', error);
                // Set default values on error
                document.getElementById('weightValue').textContent = '0.0';
                document.getElementById('totalWeight').textContent = '0.0';
                document.getElementById('weightInput').value = '';
            }
        });

        // Update the requestWeight function with better error handling
        async function requestWeight() {
            try {
                const response = await fetch('/esp32/measure-weight', {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                if (data.success) {
                    // Update the weight input field with the new item's weight
                    const weight = data.weight || 0;
                    const totalWeight = data.totalWeight || 0;
                    
                    document.getElementById('weightInput').value = weight.toFixed(1);
                    document.getElementById('weightValue').textContent = weight.toFixed(1);
                    document.getElementById('totalWeight').textContent = totalWeight.toFixed(1);
                    document.getElementById('weight').value = weight.toFixed(1);
                    
                    // Update weight history display
                    const historyDiv = document.getElementById('weightHistory');
                    historyDiv.innerHTML = '';
                    
                    if (Array.isArray(data.weightHistory)) {
                        data.weightHistory.forEach((weight, index) => {
                            if (typeof weight === 'number') {
                                const item = document.createElement('div');
                                item.className = 'flex justify-between items-center py-1 px-2 bg-gray-600 rounded mb-1';
                                item.innerHTML = `
                                    <span>Item ${index + 1}:</span>
                                    <span>${weight.toFixed(1)}g</span>
                                `;
                                historyDiv.appendChild(item);
                            }
                        });
                    }
                    
                    console.log('Weight received:', weight);
                    console.log('Total weight:', totalWeight);
                    console.log('Weight history:', data.weightHistory);
                } else {
                    console.error('Failed to get weight:', data.message);
                    alert('Failed to get weight measurement: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error requesting weight:', error);
                alert('Failed to get weight measurement. Please try again.');
            }
        }

        // Update the resetWeight function
        async function resetWeight() {
            try {
                const response = await fetch('/esp32/reset-weight', {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                if (data.success) {
                    // Reset all displays
                    document.getElementById('weightValue').textContent = '0.0';
                    document.getElementById('totalWeight').textContent = '0.0';
                    document.getElementById('weightInput').value = '';
                    document.getElementById('weight').value = '0';
                    document.getElementById('weightHistory').innerHTML = '';
                    document.querySelector('.weight-display .text-sm').textContent = 
                        'Place first item on scale';
                }
            } catch (error) {
                console.error('Error resetting weight:', error);
                alert('Failed to reset weight measurement');
            }
        }
    </script>
</body>

</html>
